name: Test Code and Push Image

on:
  push:
  pull_request:
    branches:
      - main
    paths:
      - "src/**"
      - "tests/**"

env:
  RUST_VERSION: 1.73

jobs:
  test:
    name: Unit, Integration and Doc Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16.0-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: welcome
          POSTGRES_DB: app_db
        ports:
          - 5432:5432

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Config env variables
        run: export SERVICE_DB_HOST=postgres

      - name: Compile program
        run: cargo test â€”no-run --test api

      - name: Run test
        run: cargo test --test api

  format:
    name: Format
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt

      - name: Run fmt
        run: cargo fmt --all -- --check

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: clippy

      - name: Run clippy
        run: cargo clippy -- -D warnings

  build-and-push-image:
    name: Build and push image to Docker Hub
    runs-on: ubuntu-latest
    environment: development
    needs: [test, format, lint]
    if: github.ref == 'refs/heads/main'
    env:
      HUB_NAME: "aimeric"
      IMAGE_NAME: "axum-demo"

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push app docker image
        uses: docker/build-push-action@v4
        env:
          IMAGE_URL: ${{ vars.HUB_NAME }}/${{ vars.IMAGE_NAME }}
        with:
          context: .
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: |
            linux/amd64
            linux/arm64
          tags: |
            ${{ env.IMAGE_URL }}:latest
